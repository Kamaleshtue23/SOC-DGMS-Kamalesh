# -*- coding: utf-8 -*-
"""VAE and Diffusion Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17pPYyyLrMSx14Y6v__3dOldCjVY2yKph
"""

pip install torch torchvision

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import numpy as np

# Define the Encoder
class Encoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2_mean = nn.Linear(hidden_dim, latent_dim)
        self.fc2_logvar = nn.Linear(hidden_dim, latent_dim)

    def forward(self, x):
        h = torch.relu(self.fc1(x))
        mean = self.fc2_mean(h)
        logvar = self.fc2_logvar(h)
        return mean, logvar

# Define the Decoder
class Decoder(nn.Module):
    def __init__(self, latent_dim, hidden_dim, output_dim):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(latent_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, z):
        h = torch.relu(self.fc1(z))
        x_reconstructed = torch.sigmoid(self.fc2(h))  # Output should be between 0 and 1
        return x_reconstructed

# Define the VAE
class VAE(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(VAE, self).__init__()
        self.encoder = Encoder(input_dim, hidden_dim, latent_dim)
        self.decoder = Decoder(latent_dim, hidden_dim, input_dim)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def forward(self, x):
        mu, logvar = self.encoder(x)
        z = self.reparameterize(mu, logvar)
        x_reconstructed = self.decoder(z)
        return x_reconstructed, mu, logvar

# Define the loss function
def loss_function(x_reconstructed, x, mu, logvar):
    BCE = nn.BCELoss(reduction='sum')(x_reconstructed, x)
    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return BCE + KLD

# Training the VAE
def train_vae(model, dataloader, optimizer, epochs=10):
    model.train()
    for epoch in range(epochs):
        train_loss = 0
        for batch in dataloader:
            data = batch[0]
            optimizer.zero_grad()
            x_reconstructed, mu, logvar = model(data)
            loss = loss_function(x_reconstructed, data, mu, logvar)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()
        print(f'Epoch {epoch + 1}, Loss: {train_loss / len(dataloader.dataset)}')

# Example usage
input_dim = 784  # For MNIST
hidden_dim = 400
latent_dim = 20

model = VAE(input_dim, hidden_dim, latent_dim)
optimizer = optim.Adam(model.parameters(), lr=1e-3)

# Create dummy data for demonstration
data = torch.rand(1000, input_dim)  # Random data in range [0, 1]
dataloader = DataLoader(TensorDataset(data), batch_size=64, shuffle=True)

train_vae(model, dataloader, optimizer)

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import matplotlib.pyplot as plt

# Define the Encoder
class Encoder(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2_mean = nn.Linear(hidden_dim, latent_dim)
        self.fc2_logvar = nn.Linear(hidden_dim, latent_dim)

    def forward(self, x):
        h = torch.relu(self.fc1(x))
        mean = self.fc2_mean(h)
        logvar = self.fc2_logvar(h)
        return mean, logvar

# Define the Decoder
class Decoder(nn.Module):
    def __init__(self, latent_dim, hidden_dim, output_dim):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(latent_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, z):
        h = torch.relu(self.fc1(z))
        x_reconstructed = torch.sigmoid(self.fc2(h))  # Output should be between 0 and 1
        return x_reconstructed

# Define the VAE
class VAE(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(VAE, self).__init__()
        self.encoder = Encoder(input_dim, hidden_dim, latent_dim)
        self.decoder = Decoder(latent_dim, hidden_dim, input_dim)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def forward(self, x):
        mu, logvar = self.encoder(x)
        z = self.reparameterize(mu, logvar)
        x_reconstructed = self.decoder(z)
        return x_reconstructed, mu, logvar

# Define the loss function
def loss_function(x_reconstructed, x, mu, logvar):
    BCE = nn.BCELoss(reduction='sum')(x_reconstructed, x)
    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return BCE + KLD

# Training the VAE with loss plotting
def train_vae(model, dataloader, optimizer, epochs=10):
    model.train()
    losses = []  # List to store the loss for each epoch

    for epoch in range(epochs):
        epoch_loss = 0
        for batch in dataloader:
            data = batch[0]
            optimizer.zero_grad()
            x_reconstructed, mu, logvar = model(data)
            loss = loss_function(x_reconstructed, data, mu, logvar)
            loss.backward()
            optimizer.step()
            epoch_loss += loss.item()

        # Calculate average loss for this epoch
        average_loss = epoch_loss / len(dataloader)
        losses.append(average_loss)
        print(f'Epoch {epoch + 1}, Average Loss: {average_loss:.4f}')

    # Plot the loss over epochs
    plt.plot(range(1, epochs + 1), losses, marker='o')
    plt.xlabel('Epoch')
    plt.ylabel('Average Loss')
    plt.title('VAE Training Loss')
    plt.grid(True)
    plt.show()

# Example usage
input_dim = 784  # For MNIST
hidden_dim = 400
latent_dim = 20

model = VAE(input_dim, hidden_dim, latent_dim)
optimizer = optim.Adam(model.parameters(), lr=1e-3)

# Create dummy data for demonstration
data = torch.rand(1000, input_dim)  # Random data in range [0, 1]
dataloader = DataLoader(TensorDataset(data), batch_size=64, shuffle=True)

train_vae(model, dataloader, optimizer, epochs=10)

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Define the UNet-like architecture for the diffusion model
class DiffusionModel(nn.Module):
    def __init__(self):
        super(DiffusionModel, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(3, 64, 3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 3, 3, padding=1)
        )

    def forward(self, x):
        return self.net(x)

# Define the diffusion process
def diffusion_step(x, beta):
    noise = torch.randn_like(x)
    return x + beta * noise

def reverse_diffusion_step(x, model, beta):
    return model(x)

# Training the diffusion model
def train_diffusion_model(model, dataloader, optimizer, num_epochs, beta):
    model.train()
    losses = []

    for epoch in range(num_epochs):
        epoch_loss = 0
        for batch in dataloader:
            images, _ = batch
            noisy_images = diffusion_step(images, beta)

            optimizer.zero_grad()
            denoised_images = reverse_diffusion_step(noisy_images, model, beta)

            loss = nn.MSELoss()(denoised_images, images)
            loss.backward()
            optimizer.step()

            epoch_loss += loss.item()

        average_loss = epoch_loss / len(dataloader)
        losses.append(average_loss)
        print(f'Epoch {epoch + 1}, Average Loss: {average_loss:.4f}')

    return losses

# Define a function to plot losses
def plot_losses(losses1, losses2, label1, label2):
    plt.figure(figsize=(12, 6))
    plt.plot(losses1, label=label1)
    plt.plot(losses2, label=label2)
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training Loss')
    plt.legend()
    plt.grid(True)
    plt.show()

# Example setup for CIFAR-10
def load_data(batch_size):
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
    train_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    return train_loader

# Example hyperparameters
batch_size = 64
num_epochs = 10
beta1 = 0.1
beta2 = 0.2

train_loader = load_data(batch_size)

model1 = DiffusionModel()
optimizer1 = optim.Adam(model1.parameters(), lr=1e-3)
losses1 = train_diffusion_model(model1, train_loader, optimizer1, num_epochs, beta1)

model2 = DiffusionModel()
optimizer2 = optim.Adam(model2.parameters(), lr=1e-4)
losses2 = train_diffusion_model(model2, train_loader, optimizer2, num_epochs, beta2)

plot_losses(losses1, losses2, 'Learning Rate 1e-3, Beta 0.1', 'Learning Rate 1e-4, Beta 0.2')